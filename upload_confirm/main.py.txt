import re
import csv
import flask
import os
import array as arr
from google.cloud import bigquery
from google.cloud import storage
from datetime import datetime

def sql(request):
    """Responds to any HTTP request.
    Args:
        request (flask.Request): HTTP request object.
    Returns:
        The response text or any set of values that can be turned into a
        Response object using
        `make_response <http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response>`.
    """
    
    request_args = request.args
    if request_args and "event" in request_args:
        eventname = request_args["event"]
    else:
        return "Missing Event Name Parameter"
        
    if request_args and "venue" in request_args:
        venue = request_args["venue"]
    else:
        return "Missing Venue Parameter"
        
    if request_args and "eventdate" in request_args:
        eventdate = request_args["eventdate"]
    else:
        return "Missing Event Date Parameter"
        
    if request_args and "overwrite" in request_args:
        trigger = request_args["overwrite"]
    else:
        return "Missing Trigger Parameter"

    proceed=1  #when 1, enter file records
    replace_event=0
    bg_client = bigquery.Client()      
    dateTimeObj = str(datetime.now())

    if (trigger=='unknown'):
        SQL0 = 'SELECT Datestamp from customertable.events where Eventname="'+eventname+'" and Venue="' + venue + '" and Eventdate="'+eventdate+'"' 
        query_job0 = bg_client.query(SQL0)
        datestamp=0
        for row in query_job0:
            datestamp=row.Datestamp
            break
        if (datestamp!=0):
            proceed=0  #  No previous record with the same venue, eventdate, and event.  Proceed.
            datetime_new = re.sub('\.\d(.*)$', '', str(datestamp))
            message="There is previous record of " + eventname + " on " + eventdate + " at " + venue + " recorded at " + datetime_new + ".  Overwrite?"            
            message=message+'&nbsp<a href="https://us-central1-scprbigquery.cloudfunctions.net/upload_confirm_test?overwrite=yes&event=' + eventname + '&venue=' + venue + '&eventdate=' + eventdate + '">Yes</a>'
            message=message+'&nbsp<a href="https://us-central1-scprbigquery.cloudfunctions.net/upload_confirm_test?overwrite=no&event=' + eventname + '&venue=' + venue + '&eventdate=' + eventdate + '">No</a>'
            return message

    elif (trigger=='yes'):
        replace_event=1  #delete previous data of event selected, so it can be overwritten.
        
    else:
        proceed=0  # No overwrite
        message="No new data was entered as requested."
        return message    

    if (proceed==1):
        if os.path.isfile("/tmp/temp.csv"):
            os.remove("/tmp/temp.csv")
        file='output.csv'
        input_bucket='csv-output-bucket'
        client = storage.Client()
        bucket = client.get_bucket(input_bucket)
        blob = bucket.blob(file)
        with open("/tmp/temp.csv", "wb") as file_obj:
            blob.download_to_file(file_obj) 

        list1=[]
        email=''
        guestcount=0
        SQL='INSERT INTO customertable.attendees (Email, First_name, Last_name, Eventname, Venue, Eventdate, Datestamp, Is_salesforce) VALUES '
        SQL2= 'INSERT INTO customertable.events (Eventname, Venue, Eventdate, Datestamp, Attendance) VALUES '
        SQL3= 'SELECT Email_Address FROM customertable.salesforce WHERE '

        with open("/tmp/temp.csv") as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=',')
            line_count = 0
            for row in csv_reader:
                if line_count == 0:   #process column names
                    if(replace_event==1):
                        SQL0 = 'DELETE FROM customertable.events where Eventname="'+eventname+'" and Venue="' + venue + '" and Eventdate="'+eventdate+'"' 
                        SQLA = 'DELETE FROM customertable.attendees where Eventname="'+eventname+'" and Venue="' + venue + '" and Eventdate="'+eventdate+'"' 
                        query_job0 = bg_client.query(SQL0) 
                        query_jobA = bg_client.query(SQLA) 
                    if(re.search('Header does not have',row[1])):             #search error message
                        err="Error: " + row[1] #not right format
                        return err
                    line_count += 1
                else:
                    if(email!=row[0]):   #take care of duplicates
                        if (line_count > 1): #add commas and ors if not first row
                            SQL=SQL+" , "
                            SQL3=SQL3+' OR '
                        guestcount=0
                        SQL = SQL+'("'+row[2]+'", "'+row[0]+'", "'+row[1]+'", "'+eventname+'", "'+venue+'", "'+eventdate+'", "'+dateTimeObj+'",FALSE)'
                        SQL3=SQL3+'Email_Address= "'+ row[2] + '" ' 
                        email=row[0]
                    else:
                        guestcount +=1
               
                    line_count +=1

        attendance=line_count-1      
        attendance=str(attendance)
        print(SQL)  
        SQL2=SQL2+'("'+eventname+'","'+venue+'","'+eventdate+'","'+dateTimeObj+'",'+attendance+')'
    
        query_job = bg_client.query(SQL)
        query_job2 = bg_client.query(SQL2)
        query_job3 = bg_client.query(SQL3)
        for row in query_job3:
            print(row[0])
        return '<a href="https://storage.cloud.google.com/csv-output-bucket/output.csv">Download</a>'


